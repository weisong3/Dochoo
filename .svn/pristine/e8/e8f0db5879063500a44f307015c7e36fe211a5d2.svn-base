package com.chc.dochoo.contacts;

import android.app.Activity;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AlphabetIndexer;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.chc.dochoo.CHCApplication;
import com.chc.found.models.AddEntityState;
import com.chc.found.models.DoctorUser;
import com.chc.found.models.EntityUser;
import com.chc.found.models.PatientUser;
import com.chc.found.presenters.EntityPresenter;
import com.chc.found.utils.SharedPreferenceUtil;
import com.chc.found.views.IEntityView;
import com.test.found.R;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class DoctorContactListFragment extends AbstractContactListFragment implements IEntityView {

	private static final String TAG = DoctorContactListFragment.class.getSimpleName();
	private EntityPresenter entityPresenter;
	private OnContactOptionListener mCallback;

    //alphabetization

    private int lastFirstVisibleItem = -1;
    private String alphabet = "#ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private ListView contactsListView;
    private AlphaDoctorContactListAdapter adapter;
    private AlphabetIndexer indexer;
    //private Button alphabetButton;
    private TextView sectionToastText;
    private RelativeLayout sectionToastLayout;
    private SideBar sidebar;

	@Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        
        // This makes sure that the container activity has implemented
        // the callback interface. If not, it throws an exception
        try {
            mCallback = (OnContactOptionListener) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnContactOptionListener");
        }
    }

	@Override
	public void onResume() {
		super.onResume();
		if (entityPresenter == null) {
			entityPresenter = new EntityPresenter(this);
		}
		CHCApplication chcApplication = getCHCApplication();
        if (chcApplication != null && !SharedPreferenceUtil.getRefreshIdle(getActivity())) {
            entityPresenter.refreshRelationList(chcApplication.getHelper(), chcApplication.getUserId(), chcApplication.getRegId());
            List<EntityUser> entityList = entityPresenter.getEntityList(chcApplication.getHelper());
            //alphabetization

            MyCursor myCursor = new MyCursor(entityList);
            adapter = new AlphaDoctorContactListAdapter(getActivity(),entityList,mCallback);

            indexer = new AlphabetIndexer(myCursor, 1, alphabet);
            contactsListView = (ListView) getView().findViewById(R.id.alphabet_listview);
            sectionToastLayout = (RelativeLayout) getView().findViewById(R.id.section_toast_layout);
            sectionToastText = (TextView) getView().findViewById(R.id.section_toast_text);
            if(entityList.size()>0){
                contactsListView.setAdapter(adapter);
            }
            reloadContent(entityList);
            ((ContactActivity) getActivity()).setAlphaDoctorAdapter((AlphaDoctorContactListAdapter) getListAdapter());
            sidebar = (SideBar) getView().findViewById(R.id.sidebar);
            sidebar.setTextView(sectionToastText);
            sidebar.setSectionToastLayout(sectionToastLayout);
            sidebar.setListView(contactsListView);
        }
	}


	@Override
	public CHCApplication getCHCApplication() {
        FragmentActivity activity = getActivity();
        if (activity == null) return null;
        return CHCApplication.getInstance(activity);
	}

	@Override
	public void onEntityLoaded(EntityUser user) {
	}

	@Override
	public void getEntityFailed(AddEntityState state) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onEntityLoaded(List<EntityUser> user) {
		reloadContent(user);
//		registerReceiver();
	}
	
	private void reloadContent(List<EntityUser> user) {
		if (user == null) return;

		
		for (EntityUser u : user) {
			// expect doctor or professional user
			if (u instanceof PatientUser) {
				// weird bug, log
				Log.e(TAG, "patient object in non-patient list, why: \n" + u.toString());
			}
		}		
		if (getListAdapter() == null) {
			setListAdapter(new AlphaDoctorContactListAdapter(getActivity(), user, mCallback));
		} else {
			((AlphaDoctorContactListAdapter)getListAdapter()).updateList(user);
		}
	}


}