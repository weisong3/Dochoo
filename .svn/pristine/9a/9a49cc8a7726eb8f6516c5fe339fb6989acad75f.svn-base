package com.chc.dochoo.contacts;

import android.app.Activity;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AlphabetIndexer;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.chc.DatabaseConfigUtil;
import com.chc.dochoo.CHCApplication;
import com.chc.dochoo.userlogin.PatientInfoFragment;
import com.chc.found.models.AddEntityState;
import com.chc.found.models.DatabaseHelper;
import com.chc.found.models.EntityUser;
import com.chc.found.models.PatientUser;
import com.chc.found.presenters.EntityPresenter;
import com.chc.found.utils.SharedPreferenceUtil;
import com.chc.found.views.IEntityView;
import com.test.found.R;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * Created by HenryW on 1/13/14.
 */
public class PatientContactProfessionalFragment extends AbstractContactListFragment implements IEntityView {

    private static final String TAG = PatientInfoFragment.class.getSimpleName();
    private EntityPresenter entityPresenter;
    private OnContactOptionListener mCallback;

    //alphabetization

    private String alphabet = "#ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private ListView contactsListView;
    private AlphaDoctorContactListAdapter adapter;
    private TextView sectionToastText;
    private RelativeLayout sectionToastLayout;
    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);

        // This makes sure that the container activity has implemented
        // the callback interface. If not, it throws an exception
        try {
            mCallback = (OnContactOptionListener) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnContactOptionListener");
        }

    }

    @Override
    public void onResume() {
        super.onResume();
        if (entityPresenter == null) {
            entityPresenter = new EntityPresenter(this);
        }
        CHCApplication chcApplication = getCHCApplication();
        if (chcApplication != null) {

            if(!SharedPreferenceUtil.getRefreshIdle(getActivity()) && getActivity() instanceof ContactActivity){
                List<EntityUser> entityList = entityPresenter.getEntityList(chcApplication.getHelper());
                entityPresenter.loadProfessionalList(chcApplication.getHelper(), chcApplication.getUserId(), chcApplication.getRegId());
                //alphabetization
                sortContacts(entityList);
                adapter = new AlphaDoctorContactListAdapter(getActivity(),entityList,mCallback);
                MyCursor myCursor = new MyCursor(entityList);

                contactsListView = (ListView) getView().findViewById(R.id.alphabet_listview);
                sectionToastLayout = (RelativeLayout) getView().findViewById(R.id.section_toast_layout);
                sectionToastText = (TextView) getView().findViewById(R.id.section_toast_text);
                if(entityList.size()>0){
                    contactsListView.setAdapter(adapter);
                }
                reloadContent(entityList);
                ((ContactActivity) getActivity()).setAlphaDoctorAdapter((AlphaDoctorContactListAdapter) getListAdapter());
                //((ContactActivity) getActivity()).setAlphaDoctorAdapter((AlphaDoctorContactListAdapter) getListAdapter());
            }
            /*if (getActivity() instanceof ContactActivity) {
                ((ContactActivity) getActivity()).setAlphaDoctorAdapter((AlphaDoctorContactListAdapter) getListAdapter());

            }*/

        }
    }


    @Override
    public CHCApplication getCHCApplication() {FragmentActivity activity = getActivity();
        if (activity == null) return null;
        return CHCApplication.getInstance(activity);
    }

    @Override
    public void onEntityLoaded(EntityUser user) {
    }

    @Override
    public void getEntityFailed(AddEntityState state) {
        // TODO Auto-generated method stub

    }

    @Override
    public void onEntityLoaded(List<EntityUser> user) {
        reloadContent(user);
    }

    private void reloadContent(List<EntityUser> user) {
        if (user == null) return;
        sortContacts(user);


        for (EntityUser u : user) {
            // expect doctor or professional user
            if (u instanceof PatientUser) {
                // weird bug, log
                Log.e(TAG, "patient object in non-patient list, why: \n" + u.toString());
            }
        }
        if (getListAdapter() == null) {
            setListAdapter(new AlphaDoctorContactListAdapter(getActivity(), user, mCallback));

        } else {
            ((AlphaDoctorContactListAdapter)getListAdapter()).updateList(user);
        }
    }

    private void sortContacts(List<EntityUser> userList){
        Collections.sort(userList, new Comparator<EntityUser>() {

            @Override
            public int compare(EntityUser lhs, EntityUser rhs) {
                return lhs.getFullname().compareToIgnoreCase(rhs.getFullname());
            }
        });
    }

}
